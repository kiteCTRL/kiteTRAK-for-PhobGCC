// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// cvideo //
// ------ //

#define cvideo_wrap_target 0
#define cvideo_wrap 0

static const uint16_t cvideo_program_instructions[] = {
            //     .wrap_target
    0x6004, //  0: out    pins, 4                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program cvideo_program = {
    .instructions = cvideo_program_instructions,
    .length = 1,
    .origin = -1,
};

static inline pio_sm_config cvideo_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + cvideo_wrap_target, offset + cvideo_wrap);
    return c;
}

//
// Initialise the PIO
// Parameters:
// - pio: The PIO to attach this to
// - sm: The state machine number
// - offset: The instruction memory offset the program is loaded at
// - pin_base: The number of the first GPIO pin to use in the PIO
// - pin_count: The number of consecutive GPIO pins to write to
// - div: The system clock divisor for PIO clock rate
//
// 
void cvideo_initialise_pio(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, double div) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = cvideo_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin_base, pin_count);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    sm_config_set_out_shift(&c, false, true, 8); //shift left(false), pull threshold
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio->sm[sm].clkdiv = (uint32_t) (div * (1 << 16)); // INT portion: 0xffff0000, FRAC portion: 0x0000ff00
}

#endif

